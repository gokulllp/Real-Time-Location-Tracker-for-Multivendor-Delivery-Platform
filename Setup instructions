
## üõ†Ô∏è Setup Instructions

Follow these steps to get the project up and running on your local machine.

### Prerequisites

* Node.js (v18 or higher recommended)
* npm (comes with Node.js)
* A Firebase Project (for Firestore and Firebase Auth setup if running outside Canvas environment)

### 1. Backend Setup

1.  **Clone the Repository:**
    ```bash
    git clone <repository-url>
    cd real-time-location-tracker # Or whatever your cloned directory is named
    ```
2.  **Navigate to Backend Directory:**
    ```bash
    cd backend
    ```
3.  **Install Dependencies:**
    ```bash
    npm install
    ```
4.  **Environment Variables:**
    * Create a `.env` file in the `backend/` directory.
    * Copy the content from `.env.example` into your new `.env` file.
    * **Important:**
        * `PORT`: The port your backend will run on (e.g., `5000`).
        * `FRONTEND_URL`: The URL of your frontend application (e.g., `http://localhost:3000`).
        * `JWT_SECRET`: A strong, random string for JWT signing. **Change this in production!**
        * **Firebase Configuration:** If you are running this *outside* a Canvas-like environment that provides `__firebase_config` and `__app_id` globally, you **MUST** uncomment and fill in your Firebase project's configuration details in the `.env` file. You can find these in your Firebase project settings -> Project settings -> General -> Your apps -> Firebase SDK snippet (Config).

    ```env
    # backend/.env
    PORT=5000
    FRONTEND_URL=http://localhost:3000
    JWT_SECRET=your_very_secure_and_long_jwt_secret_here

    # Uncomment and fill if NOT running in a Canvas environment
    # FIREBASE_API_KEY="AIzaSy..."
    # FIREBASE_AUTH_DOMAIN="your-project.firebaseapp.com"
    # FIREBASE_PROJECT_ID="your-project-id"
    # FIREBASE_STORAGE_BUCKET="your-project.appspot.com"
    # FIREBASE_MESSAGING_SENDER_ID="1234567890"
    # FIREBASE_APP_ID="1:1234567890:web:abcdef12345"
    ```
5.  **Run the Backend:**
    * For development (with live reload):
        ```bash
        npm run dev
        ```
    * For production (build and run):
        ```bash
        npm run build
        npm start
        ```
    The backend server should now be running on `http://localhost:5000` (or your specified port).

### 2. Frontend Setup

1.  **Navigate to Frontend Directory:**
    ```bash
    cd ../frontend
    ```
2.  **Install Dependencies:**
    ```bash
    npm install
    ```
3.  **Environment Variables:**
    * Create a `.env.local` file in the `frontend/` directory.
    * Copy the content from `.env.local.example` into your new `.env.local` file.
    * Ensure `NEXT_PUBLIC_BACKEND_URL` matches the port your backend is running on.

    ```env
    # frontend/.env.local
    NEXT_PUBLIC_BACKEND_URL=http://localhost:5000
    ```
4.  **Run the Frontend:**
    ```bash
    npm run dev
    ```
    The frontend application should now be accessible at `http://localhost:3000` (or your specified port).

## üöÄ Usage Guide

Once both the backend and frontend are running:

1.  **Access the Frontend:** Open your web browser and go to `http://localhost:3000`.
2.  **Sign Up:**
    * Click on "Sign Up".
    * Create accounts for each role:
        * **Vendor:** Choose `Vendor` role, provide `Vendor Name`, Email, and Password.
        * **Delivery Partner:** Choose `Delivery Partner` role, Email, and Password.
        * **Customer:** Choose `Customer` role, Email, and Password.
3.  **Login as Vendor:**
    * Login with your Vendor account.
    * You will be redirected to the Vendor Dashboard.
    * **Create Orders (for demo):** Click the "Create New Order (For Demo)" button. You will be prompted to enter a Customer User ID. Use the `id` of a customer account you created (you can find this ID in your backend logs when the customer signs up, or you can retrieve it from the Firestore `users` collection). This will create a new order visible on your dashboard. Note the `Tracking ID` generated for this order.
4.  **Login as Delivery Partner:**
    * Login with your Delivery Partner account.
    * You will see orders assigned to you (if any).
    * **Start Delivery:** For an order with `status: assigned`, click "Start Delivery". This will update the order status to "on_the_way" and begin simulating real-time location updates from the delivery partner.
    * **Complete Delivery:** Once the delivery is simulated, click "Complete Delivery" to mark the order as delivered and stop tracking.
5.  **Track as Customer:**
    * You don't need to be logged in as a customer to track.
    * Use the `Tracking ID` obtained from the Vendor Dashboard.
    * Navigate directly to the tracking page: `http://localhost:3000/track/YOUR_TRACKING_ID`.
    * You should see the delivery partner's live location updating on the map if they have started the delivery.
