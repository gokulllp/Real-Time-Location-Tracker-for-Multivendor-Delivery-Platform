## üèõÔ∏è Architecture

The application follows a client-server architecture with real-time capabilities enabled by WebSockets.

+---------------------+         +----------------------------+         +-----------------+
|     Frontend        |         |        Backend API         |         |     Database    |
| (Next.js / React)   |         | (Node.js / Express / TS)   |         |    (Firestore)  |
|                     |         |                            |         |                 |
| - Vendor Dashboard  | <-----> | - Auth (Login/Signup)      | <-----> | - Users         |
| - Delivery Dashboard|   REST  | - Vendor APIs              |   CRUD  | - Vendors       |
| - Customer Tracking |         | - Delivery Partner APIs    |         | - Orders        |
+----------^----------+         | - Customer Tracking API    |         | - Locations (History)|
|                    +-------------^--------------+         +-----------------+
|  WebSocket (Socket.IO)           |
+----------------------------------+
Real-time Location Updates


* **Frontend (Next.js):** A server-side rendered React application providing a responsive user interface for all three roles. It communicates with the backend via REST APIs for initial data fetching and state changes, and uses Socket.IO for real-time location updates.
* **Backend (Node.js/Express):** A TypeScript-based RESTful API server. It handles user authentication (signup/login), manages orders, assigns delivery partners, and processes location updates.
* **Database (Firestore):** A NoSQL cloud database used for persistent storage of user data, vendor information, orders, and location history. Its real-time capabilities (though not directly used for live updates in this setup, but for data persistence) are well-suited for dynamic applications.
* **WebSockets (Socket.IO):** The backbone of the real-time tracking feature. Delivery partners push their location updates to the server via WebSockets, and the server then broadcasts these updates to relevant customer tracking pages.
* **Authentication (JWT):** JSON Web Tokens are used for secure authentication across all user roles, ensuring that only authorized users can access specific API endpoints.
* **Multitenancy Logic:** The backend implements logic to ensure that vendors can only view and manage their own orders, providing data isolation.

## üöÄ Tech Stack

* **Frontend:**
    * [Next.js](https://nextjs.org/) (React Framework)
    * [TypeScript](https://www.typescriptlang.org/)
    * [Tailwind CSS](https://tailwindcss.com/) (for rapid styling)
    * [Leaflet.js](https://leafletjs.com/) & [React-Leaflet](https://react-leaflet.js.org/) (for interactive maps)
    * [Socket.IO Client](https://socket.io/docs/v4/client-api/)
* **Backend:**
    * [Node.js](https://nodejs.org/)
    * [Express.js](https://expressjs.com/) (Web Framework)
    * [TypeScript](https://www.typescriptlang.org/)
    * [Firestore](https://firebase.google.com/docs/firestore) (Database)
    * [Socket.IO](https://socket.io/) (WebSockets)
    * [JWT (jsonwebtoken)](https://www.npmjs.com/package/jsonwebtoken) (Authentication)
    * [Bcrypt.js](https://www.npmjs.com/package/bcryptjs) (Password Hashing)
    * [UUID](https://www.npmjs.com/package/uuid) (for generating unique IDs)

